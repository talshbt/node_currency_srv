"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const formatDate_1 = require("./formatDate");
class Fixer {
    constructor(opts = {}) {
        this.basicOptions = {
            baseUrl: opts.baseUrl || constants_1.DEFAULT_URL,
            accessKey: opts.accessKey
        };
    }
    set({ baseUrl, accessKey } = {}) {
        this.basicOptions.baseUrl = baseUrl || this.basicOptions.baseUrl;
        this.basicOptions.accessKey = accessKey || this.basicOptions.accessKey;
        return this;
    }
    forDate(date, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let formattedDate;
            const RE_DATE = /^\d{4}-\d{2}-\d{2}$/;
            if (typeof date === 'string' && RE_DATE.test(date)) {
                formattedDate = date;
            }
            else if (date instanceof Date) {
                formattedDate = formatDate_1.default(date);
            }
            else {
                throw new Error('Invalid date argument');
            }
            return this.request(`/${formattedDate}`, opts);
        });
    }
    latest(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('/latest', opts);
        });
    }
    convert(from, to, amount, date) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('/convert', {
                from,
                to,
                amount,
                date
            });
        });
    }
}
exports.Fixer = Fixer;
//# sourceMappingURL=Fixer.js.map