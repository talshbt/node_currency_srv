{"version":3,"file":"Fixer.js","sourceRoot":"","sources":["../src/Fixer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2CAA0C;AAC1C,6CAAsC;AAiDtC,MAAsB,KAAK;IAGzB,YAAY,OAA+B,EAAE;QAC3C,IAAI,CAAC,YAAY,GAAG;YAClB,OAAO,EAAE,IAAI,CAAC,OAAO,IAAI,uBAAW;YACpC,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,KAA6B,EAAE;QACrD,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;QACjE,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;QACvE,OAAO,IAAI,CAAC;IACd,CAAC;IAEK,OAAO,CAAC,IAAmB,EAAE,OAAiC,EAAE;;YACpE,IAAI,aAAa,CAAC;YAElB,MAAM,OAAO,GAAG,qBAAqB,CAAC;YACtC,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAClD,aAAa,GAAG,IAAI,CAAC;aACtB;iBAAM,IAAI,IAAI,YAAY,IAAI,EAAE;gBAC/B,aAAa,GAAG,oBAAU,CAAC,IAAI,CAAC,CAAC;aAClC;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;aAC1C;YAED,OAAO,IAAI,CAAC,OAAO,CAAiB,IAAI,aAAa,EAAE,EAAE,IAAI,CAAC,CAAC;QACjE,CAAC;KAAA;IAEK,MAAM,CAAC,OAAiC,EAAE;;YAC9C,OAAO,IAAI,CAAC,OAAO,CAAiB,SAAS,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC;KAAA;IAEK,OAAO,CAAC,IAAY,EAAE,EAAU,EAAE,MAAc,EAAE,IAAoB;;YAE1E,OAAO,IAAI,CAAC,OAAO,CAAwB,UAAU,EAAE;gBACrD,IAAI;gBACJ,EAAE;gBACF,MAAM;gBACN,IAAI;aACL,CAAC,CAAC;QACL,CAAC;KAAA;CAGF;AA9CD,sBA8CC","sourcesContent":["import { DEFAULT_URL } from './constants';\nimport formatDate from './formatDate';\n\nexport interface IFixerRates {\n  readonly [currency: string]: number;\n}\n\nexport interface IFixerResponse {\n  readonly base: string;\n  readonly date: string;\n  readonly rates: IFixerRates;\n  readonly timestamp: number;\n  readonly error?: {\n    type: string,\n    info: string\n  };\n}\n\nexport interface IFixerConvertRequestOptions {\n  readonly from: string;\n  readonly to: string;\n  readonly amount: number;\n  readonly date?: string;\n}\n\nexport interface IFixerConvertResponse {\n  readonly success: boolean;\n  readonly query: {\n    readonly from: string;\n    readonly to: string;\n    readonly amount: number\n  };\n  readonly date: string;\n  readonly result: number;\n}\n\nexport interface IRawParams {\n  [key: string]: any;\n}\nexport interface IRequestOptions {\n  base?: string;\n  symbols?: string[];\n  access_key: string;\n}\n\nexport interface IBasicOptions {\n  baseUrl: string;\n  accessKey?: string;\n}\n\nexport abstract class Fixer {\n  protected basicOptions: IBasicOptions;\n\n  constructor(opts: Partial<IBasicOptions> = {}) {\n    this.basicOptions = {\n      baseUrl: opts.baseUrl || DEFAULT_URL,\n      accessKey: opts.accessKey\n    };\n  }\n\n  set({ baseUrl, accessKey }: Partial<IBasicOptions> = {}): Fixer {\n    this.basicOptions.baseUrl = baseUrl || this.basicOptions.baseUrl;\n    this.basicOptions.accessKey = accessKey || this.basicOptions.accessKey;\n    return this;\n  }\n\n  async forDate(date: Date | string, opts: Partial<IRequestOptions> = {}): Promise<IFixerResponse> {\n    let formattedDate;\n\n    const RE_DATE = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (typeof date === 'string' && RE_DATE.test(date)) {\n      formattedDate = date;\n    } else if (date instanceof Date) {\n      formattedDate = formatDate(date);\n    } else {\n      throw new Error('Invalid date argument');\n    }\n\n    return this.request<IFixerResponse>(`/${formattedDate}`, opts);\n  }\n\n  async latest(opts: Partial<IRequestOptions> = {}): Promise<IFixerResponse> {\n    return this.request<IFixerResponse>('/latest', opts);\n  }\n\n  async convert(from: string, to: string, amount: number, date?: Date | string):\n    Promise<IFixerConvertResponse> {\n    return this.request<IFixerConvertResponse>('/convert', {\n      from,\n      to,\n      amount,\n      date\n    });\n  }\n\n  protected abstract request<Result>(url: string, opts: IRawParams): Promise<Result>;\n}\n"]}